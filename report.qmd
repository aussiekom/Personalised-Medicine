## Load libraries and data files

```{r, message = FALSE}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('grid') # visualisation
library('gridExtra') # visualisation
library('corrplot') # visualisation
library('ggraph') # visualisation
library('igraph') # visualisation
library('dplyr') # data manipulation
library('readr') # data input
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('tidytext') # text mining
library('SnowballC') # text analysis
library('wordcloud') # test visualisation
```

Reading in the variants data tables:

```{r, message=FALSE, warning=FALSE}
train <- read_csv('data/training_variants')
test  <- read_csv('data/test_variants')
```

Reading in the text files currently takes a little bit more effort in R.

```{r, message=FALSE, warning=FALSE}
train_txt_dump <- tibble(text = read_lines('data/training_text', skip = 1))
train_txt <- train_txt_dump %>%
  separate(text, into = c("ID", "txt"), sep = "\\|\\|")
train_txt <- train_txt %>%
  mutate(ID = as.integer(ID))

test_txt_dump <- tibble(text = read_lines('data/test_text', skip = 1))
test_txt <- test_txt_dump %>%
  separate(text, into = c("ID", "txt"), sep = "\\|\\|")
test_txt <- test_txt %>%
  mutate(ID = as.integer(ID))
```

# The variants data tables

Start this EDA with a look at the *variants* data files, which are more easily accessible through common visualisation tools.

## First table overviews of the data:

Use the `summary` and `glimpse` tools for a first overview:

```{r}
train <- train %>%
  mutate(Gene = factor(Gene),
         Variation = factor(Variation),
         Class = factor(Class))

test <- test %>%
  mutate(Gene = factor(Gene),
         Variation = factor(Variation))

summary(train, maxsum = 9)
```

```{r}
glimpse(train)
```

```{r}
nrow(train)
nrow(test)
```

```{r}
sum(is.na(train))
sum(is.na(test))
```

```{r}
train %>%
  group_by(Gene) %>%
  summarise(ct = n()) %>%
  arrange(desc(ct))

test %>%
  group_by(Gene) %>%
  summarise(ct = n()) %>%
  arrange(desc(ct))

train %>%
  group_by(Variation) %>%
  summarise(ct = n()) %>%
  arrange(desc(ct))

test %>%
  group_by(Variation) %>%
  summarise(ct = n()) %>%
  arrange(desc(ct))
```

Findings:

-   There are 3321 different *IDs* in the training set containing 264 different *Gene* expressions with 2996 different *Variations*. There are 9 different *Classes* indicated by integer levels.

-   The *Gene* and *Variation* features contain character strings of various lengths.

-   There is 70% more test data than train data. The data description tells us that "Some of the test data is machine-generated to prevent hand labeling.", which should explain this otherwise curious imbalance.

-   There are no missing values in the variants data.

-   The most frequent *Genes* in the train vs test data are complete different. In addition, the test data seems to contain significantly more different *Genes* and fewer high-frequency *Genes* than the train data. To some extent, this might be an effect of the added machine-generate entries in the test data (by adding many different random levels). Thereby, the difference in frequency might mirror the true fraction of effective test data over train data.

-   In contrast, the most frequent *Variations* in train vs test are largely identical; although, again, the corresponding frequencies are lower in the test data (by a factor of 5 - 10).

## Individual feature visualisations

This is the frequency distribution of the most frequent *Gene* values:

```{r fig.align = 'default', warning = FALSE, fig.cap ="Fig. 1", out.width="100%"}
top_gene <- train %>%
  group_by(Gene) %>%
  summarise(ct = n()) %>%
  filter(ct > 40)

top_gene %>%
  ggplot(aes(reorder(Gene, -ct, FUN = min), ct)) +
  geom_point(size = 4) +
  labs(x = "Gene", y = "Frequency") +
  coord_flip()
```

```{r fig.align = 'default', warning = FALSE, fig.cap ="Fig. 2", out.width="100%"}
top_gene_test <- test %>%
  group_by(Gene) %>%
  summarise(ct = n()) %>%
  filter(ct > 40)

top_gene_test %>%
  ggplot(aes(reorder(Gene, -ct, FUN = min), ct)) +
  geom_point(size = 4) +
  labs(x = "Gene", y = "Frequency") +
  coord_flip()
```

Findings:

-   A relatively small group of *Gene* levels make up a sizeable part of the feature values in both train and test data.

-   The test data has fewer high-frequency *Genes*.

These are the most frequent *Variations* in the train (blue) vs test (red) data; confirming what we already saw by comparing the table data:

```{r  fig.align = 'default', message = FALSE, warning = FALSE, fig.cap ="Fig. 3", out.width="100%"}
foo <- train %>% 
  mutate(set = factor("train")) %>% 
  select(-Class, -ID)

bar <- test %>% 
  mutate(set = factor("test")) %>% 
  select(-ID)

foo <- full_join(foo, bar)

foo %>%
  group_by(Variation, set) %>%
  summarise(ct = n()) %>%
  filter(ct > 3) %>%
  ggplot(aes(reorder(Variation, -ct, FUN = median), ct, colour = set)) +
  geom_point(size = 4) +
  coord_cartesian(ylim = c(0, 100)) +
  labs(x = "Variation", y = "Frequency")
```

Here we see how the *Class* target is distributed in the train data:

```{r fig.align = 'default', warning = FALSE, fig.cap ="Fig. 4", out.width="100%"}
train %>%
  ggplot(aes(Class)) +
  geom_bar()
```

Findings:

-   *Class* levels 3, 8, and 9 are notably under-represented

-   Levels 5 and 6 are of comparable, medium-low frequency

-   Levels 1, 2, and 4 are of comparable, medium-high frequency

-   Level 7 is clearly the most frequent one

## Feature interactions

Now we want to examine how the features interact with each other and with the target *Class* variable.

### *Gene* vs *Class*

First, we will look at the frequency distribution of the overall most frequent *Genes* for the different *Classes*. Note the logarithmic frequency scale.

```{r fig.align = 'default', warning = FALSE, fig.cap ="Fig. 5", out.width="100%"}
train %>%
  filter(Gene %in% str_c(top_gene$Gene)) %>%
  ggplot(aes(Gene)) +
  geom_bar() +
  scale_y_log10() +
  theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=7)) +
  facet_wrap(~ Class)
```

We see immediately that there are significant differences:

-   Some *Genes*, like "PTEN", are predominatly present in a single *Class* (here: 4).

-   Other *Genes*, like "TP53", are mainly shared between 2 classes (here: 1 and 4).

-   *Classes* 8 and 9 contain none of the most frequent *Genes*.

Here's what it looks like for the *Classes* sorted by *Genes* (again log counts):

```{r fig.align = 'default', warning = FALSE, fig.cap ="Fig. 6", out.width="100%"}
train %>%
  filter(Gene %in% str_c(top_gene$Gene)) %>%
  ggplot(aes(Class)) +
  geom_bar() +
  scale_y_log10() +
  facet_wrap(~ Gene)
```

This representation underlines our findings about the similar/dominating *Genes* in different *Classes*.

### *Gene* vs *Variation*

Next, we are somewhat re-purposing a count plot to visualise how the *Variations* are distributed for the most frequent *Genes*. Since there are so many different variations we drop the y-axis labels and merely illustrate how many *Gene* - *Variation* combinations exist in the data.

First the training data:

```{r split=FALSE, fig.align = 'default', warning = FALSE, fig.cap ="Fig. 7", out.width="100%"}
foo <- train %>%
  filter(Gene %in% str_c(top_gene$Gene)) %>%
  group_by(Gene, Variation) %>%
  summarise(ct = n())

y_labels <- str_sub(foo$Variation, start = 1, end = 5)
  
foo %>%
  ggplot(aes(reorder(Gene, ct, FUN = median), reorder(Variation, ct, FUN = median))) +
  geom_count() +
  labs(x = "Gene", y = "Variation") +
  theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=7),
        axis.ticks = element_blank(), axis.text.y = element_blank(),
        legend.position = "none")
```

Then the test data:

```{r split=FALSE, fig.align = 'default', warning = FALSE, fig.cap ="Fig. 8", out.width="100%"}
foo <- test %>%
  filter(Gene %in% str_c(top_gene$Gene)) %>%
  group_by(Gene, Variation) %>%
  summarise(ct = n())

y_labels <- str_sub(foo$Variation, start = 1, end = 5)
  
foo %>%
  ggplot(aes(reorder(Gene, ct, FUN = median), reorder(Variation, ct, FUN = median))) +
  geom_count() +
  labs(x = "Gene", y = "Variation") +
  theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=7),
        axis.ticks = element_blank(), axis.text.y = element_blank(),
        legend.position = "none")
```

Once more, the two data sets are rather heterogeneous in this view.
